---
title: "Some more HTML features"
author: "Selina Baldauf"
date: today
format: 
  html: 
    number-sections: true
    toc: true
    toc-location: left
    df-print: kable
execute: 
  echo: true
  warning: false
  message: false
---

First load the packages needed (Install first with `install.packages` if needed):

```{r}
#| label: setup
library(kableExtra)
library(tidyverse)
library(palmerpenguins)
```

# About tables

First just create a summary table and save it in a variable:

```{r}
#| label: penguin-summary
summary_peng <- penguins %>%
  filter(!(is.na(sex))) %>%
  group_by(species, sex) %>%
  summarize(
    bill_length = mean(bill_length_mm, na.rm = TRUE),
    bill_depth = mean(bill_depth_mm, na.rm = TRUE),
    flipper_length = mean(flipper_length_mm, na.rm = TRUE),
    body_mass = mean(body_mass_g, na.rm = TRUE)
  )
```

By default, printing is the console print version of a data frame. If the `df-print` option in the yaml header is set, the `kable` printing function from the `knitr` package is used for table printing, which is nicer to look at.

```{r}
#| label: tbl-summary
#| tbl-cap: A summary of the penguin data

summary_peng
```

To make the table printing look better, we can explicitly call the `kable` function and pass some arguments:

```{r}
#| label: tbl-summary-kable
#| tbl-cap: A nicer summary table with the `kable` function
summary_peng %>%
  kable(
    digits = 1,
    col.names = c(
      "Species",
      "Sex",
      "Bill length",
      "Bill depth",
      "Flipper length",
      "Body mass"
    ),
    caption = "Mean penguin variables with `kable` and `kableExtra`",
    align = "c",
    booktabs = TRUE
  )
```

To add some more styling, you can add `kable_styling` from the `kableExtra` package.

```{r}
#| label: tbl-styling
#| tbl-cap: Adding some kable styling
summary_peng %>%
  kable(
    digits = 1,
    col.names = c(
      "Species",
      "Sex",
      "Bill length",
      "Bill depth",
      "Flipper length",
      "Body mass"
    ),
    caption = "Mean penguin variables with `kable` and `kableExtra`",
    align = "c",
    booktabs = TRUE
  ) %>%
  kable_styling(
    latex_options = c("striped", "hold_position"),
    bootstrap_options = c("striped", "hover"),
    full_width = FALSE,
    position = "center"
  )
```

And if you really want to exaggerate, you can also pack rows and columns (also from the `kableExtra` package)

```{r}
#| label: tbl-packed
#| tbl-cap: A summary table with packed rows

summary_peng %>%
  arrange(sex) %>%
  select(-sex) %>%
  kable(
    digits = 1,
    col.names = c(
      "Species",
      "Bill length",
      "Bill depth",
      "Flipper length",
      "Body mass"
    ),
    caption = "Mean penguin variables with `kable` and `kableExtra` and packed rows",
    align = "c",
    booktabs = TRUE
  ) %>%
  pack_rows("female", 1, 3) %>%
  pack_rows("male", 4, 6) %>%
  kable_styling(
    latex_options = c("striped", "hold_position"),
    bootstrap_options = c("striped", "hover"),
    full_width = FALSE,
    position = "center"
  )
```

You can do even more cool things like coloring cells according to value, etc. To learn about the possibilities have a look at the [`kableExtra` website](https://haozhu233.github.io/kableExtra/awesome_table_in_html.html).

# Interactive plots

HTML output allows you, to have interactive plots in your documents. Including an interactive plot is easier that you might think. Consider e.g. the following ggplot called `penguin_plot`:

```{r}
penguin_plot <- ggplot(
  penguins,
  aes(x = body_mass_g, fill = species)
) +
  geom_histogram(alpha = 0.6) +
  scale_fill_manual(
    values = c("darkorange", "purple", "cyan4")
  ) +
  theme_minimal() +
  labs(
    x = "Body mass (g)",
    y = "Count",
    color = "Species"
  )
```

To make this plot interactive, you only need to wrap it in the `ggplotly` function from the `plotly` package:

```{r}
# install.packages("plotly")
plotly::ggplotly(penguin_plot)
```
